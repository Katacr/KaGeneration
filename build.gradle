plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'org.katacr'
version = '1.3'

repositories {
    mavenCentral()
    maven {
        name = "PaperMC" // PaperMC 仓库
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = "placeholderapi" // PlaceholderAPI 仓库
        url = 'https://repo.extendedclip.com/releases/'
    }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "matteodev"
        url = "https://maven.devs.beer/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.18.2-R0.1-SNAPSHOT")
    compileOnly('org.jetbrains:annotations:24.0.1')
    compileOnly('me.clip:placeholderapi:2.11.6')
    compileOnly('dev.lone:api-itemsadder:4.0.10')
}

tasks {
    runServer {
        // 配置 Minecraft 版本
        minecraftVersion("1.18")
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    // 修复重复文件问题
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    // 处理变量替换
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'

    // 只处理 plugin.yml 文件
    filesMatching('plugin.yml') {
        expand props
    }

    // 处理所有 YAML 文件
    filesMatching('**/*.yml') {
        expand props
    }

    // 从资源目录复制文件
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.yml'
        include '**/*.yaml'
    }
}

// 添加构建任务
task buildPlugin(type: Jar) {
    from sourceSets.main.output
    archiveFileName = "KaGeneration-${version}.jar"
    destinationDirectory = file("$buildDir/libs")
}

// 确保构建任务依赖于类文件
buildPlugin.dependsOn classes

// 添加构建任务到构建流程
build.dependsOn buildPlugin